// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrdersServiceClient is the client API for OrdersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdersServiceClient interface {
	Create(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	GetAll(ctx context.Context, in *GetAllOrdersRequests, opts ...grpc.CallOption) (*GetAllOrdersResponse, error)
	FindByID(ctx context.Context, in *FindByIDRequests, opts ...grpc.CallOption) (*FindByIDResponse, error)
	UpdateByID(ctx context.Context, in *UpdateByIDRequests, opts ...grpc.CallOption) (*UpdateByIDResponse, error)
	DeleteByID(ctx context.Context, in *DeleteByIDRequests, opts ...grpc.CallOption) (*DeleteByIDResponse, error)
}

type ordersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersServiceClient(cc grpc.ClientConnInterface) OrdersServiceClient {
	return &ordersServiceClient{cc}
}

func (c *ordersServiceClient) Create(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/gelu.orders.v1.OrdersService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) GetAll(ctx context.Context, in *GetAllOrdersRequests, opts ...grpc.CallOption) (*GetAllOrdersResponse, error) {
	out := new(GetAllOrdersResponse)
	err := c.cc.Invoke(ctx, "/gelu.orders.v1.OrdersService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) FindByID(ctx context.Context, in *FindByIDRequests, opts ...grpc.CallOption) (*FindByIDResponse, error) {
	out := new(FindByIDResponse)
	err := c.cc.Invoke(ctx, "/gelu.orders.v1.OrdersService/FindByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) UpdateByID(ctx context.Context, in *UpdateByIDRequests, opts ...grpc.CallOption) (*UpdateByIDResponse, error) {
	out := new(UpdateByIDResponse)
	err := c.cc.Invoke(ctx, "/gelu.orders.v1.OrdersService/UpdateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) DeleteByID(ctx context.Context, in *DeleteByIDRequests, opts ...grpc.CallOption) (*DeleteByIDResponse, error) {
	out := new(DeleteByIDResponse)
	err := c.cc.Invoke(ctx, "/gelu.orders.v1.OrdersService/DeleteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdersServiceServer is the server API for OrdersService service.
// All implementations must embed UnimplementedOrdersServiceServer
// for forward compatibility
type OrdersServiceServer interface {
	Create(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	GetAll(context.Context, *GetAllOrdersRequests) (*GetAllOrdersResponse, error)
	FindByID(context.Context, *FindByIDRequests) (*FindByIDResponse, error)
	UpdateByID(context.Context, *UpdateByIDRequests) (*UpdateByIDResponse, error)
	DeleteByID(context.Context, *DeleteByIDRequests) (*DeleteByIDResponse, error)
	mustEmbedUnimplementedOrdersServiceServer()
}

// UnimplementedOrdersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrdersServiceServer struct {
}

func (UnimplementedOrdersServiceServer) Create(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrdersServiceServer) GetAll(context.Context, *GetAllOrdersRequests) (*GetAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedOrdersServiceServer) FindByID(context.Context, *FindByIDRequests) (*FindByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByID not implemented")
}
func (UnimplementedOrdersServiceServer) UpdateByID(context.Context, *UpdateByIDRequests) (*UpdateByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByID not implemented")
}
func (UnimplementedOrdersServiceServer) DeleteByID(context.Context, *DeleteByIDRequests) (*DeleteByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (UnimplementedOrdersServiceServer) mustEmbedUnimplementedOrdersServiceServer() {}

// UnsafeOrdersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdersServiceServer will
// result in compilation errors.
type UnsafeOrdersServiceServer interface {
	mustEmbedUnimplementedOrdersServiceServer()
}

func RegisterOrdersServiceServer(s grpc.ServiceRegistrar, srv OrdersServiceServer) {
	s.RegisterService(&OrdersService_ServiceDesc, srv)
}

func _OrdersService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gelu.orders.v1.OrdersService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).Create(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrdersRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gelu.orders.v1.OrdersService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).GetAll(ctx, req.(*GetAllOrdersRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gelu.orders.v1.OrdersService/FindByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).FindByID(ctx, req.(*FindByIDRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_UpdateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateByIDRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).UpdateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gelu.orders.v1.OrdersService/UpdateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).UpdateByID(ctx, req.(*UpdateByIDRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIDRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gelu.orders.v1.OrdersService/DeleteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).DeleteByID(ctx, req.(*DeleteByIDRequests))
	}
	return interceptor(ctx, in, info, handler)
}

// OrdersService_ServiceDesc is the grpc.ServiceDesc for OrdersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrdersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gelu.orders.v1.OrdersService",
	HandlerType: (*OrdersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrdersService_Create_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _OrdersService_GetAll_Handler,
		},
		{
			MethodName: "FindByID",
			Handler:    _OrdersService_FindByID_Handler,
		},
		{
			MethodName: "UpdateByID",
			Handler:    _OrdersService_UpdateByID_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _OrdersService_DeleteByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orders.proto",
}
